{"version":3,"sources":["PathVisualizer/Node/Node.jsx","PathVisualizer/Ui/InfoBox.jsx","algorithms/dijkstra.js","algorithms/astar.js","algorithms/bi-dijkstra.js","PathVisualizer/PathVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","rowOffset","type","posX","posY","onMouseDown","onMouseEnter","onMouseUp","classOffset","id","className","Component","InfoBox","getAllNodes","grid","nodes","y","node","push","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","length","filter","resetNodes","newGrid","slice","x","newNode","Infinity","finishDistance","getShortestPath","finishNode","shortestPath","currentNode","pathcost","unshift","document","getElementById","innerHTML","setFinishDist","dist","Math","round","sqrt","pow","sortNodesByFinishDistance","updateUnvisitedNeighborsBi","isVisited","console","log","ACTION","ALGOS","PathfindingVisualizer","state","mouseIsPressed","mouseAction","startNode","getStartGrid","setState","action","getUpdateWallRoadGrid","getUpdateStartFinishGrid","selectValue","value","visitedNodesInOrder","nodesInShortestPath","i","addNodeVisited","setTimeout","animateShortestPath","addNodeFocus","visitedNodesInOrderBi","count","countBi","visitedNode","checkClassnameChangeable","classList","add","nodeElement","contains","remove","clear","algo","visualizeDijkstra","visualizeAStar","visualizeBiDijkstra","startPos","finishPos","startTime","window","performance","now","algoGrid","closestNode","shift","time","toFixed","dijkstra","animateDijkstra","astar","algoGridBi","startNodeBi","unvisitedNodesBi","closestNodeBi","finishNode2","finishNode1","bidijkstra","getShortestPathBidirectional","animateDijkstraBidirectional2","clearAll","newType","offset","clearLabels","selectObj","defaultValue","onChange","changeDrawType","onClick","startAlgo","setAction","map","xId","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","getBoundingClientRect","width","height","yAmount","xAmount","row","createNode","oldX","oldY","oldNode","newStart","theNewStart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61883e77.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      rowOffset,\r\n      type,\r\n      posX,\r\n      posY,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    const classOffset = rowOffset ? \"row-offset\" : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${posX}-${posY}`}\r\n        className={`node ${classOffset} ${type}`}\r\n        onMouseDown={() => onMouseDown(posX, posY)}\r\n        onMouseEnter={() => onMouseEnter(posX, posY)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nexport default class InfoBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"infobox\">\r\n        <div className=\"info\">\r\n          <div className=\"info-top\">\r\n            <div className=\"infoFlex\">\r\n              <label id=\"algo-text\">Algorithm:</label>\r\n              <label id=\"labelAlgorithm\">--</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"info-center\">\r\n            <div className=\"info-left info-side\">\r\n              <div className=\"infoFlex\">\r\n                <label>Speed:</label>\r\n                <label id=\"labelSpeed\">--</label>\r\n              </div>\r\n              <div className=\"infoFlex\">\r\n                <label>NodesVisited:</label>\r\n                <label id=\"labelNodesVisited\">--</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"info-right info-side\">\r\n              <div className=\"infoFlex\">\r\n                <label>Path-Length:</label>\r\n                <label id=\"labelPathLength\">--</label>\r\n              </div>\r\n              <div className=\"infoFlex\">\r\n                <label>Path-Cost:</label>\r\n                <label id=\"labelPathCost\">--</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"Dijkstra\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n\r\n  startNode.distance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //skip wall\r\n    if (closestNode.type === \"wall\") continue;\r\n\r\n    //when closest node has distance infinity we are stuck -> stop\r\n    if (closestNode.distance === Infinity) {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode.type === \"finish\") {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, algoGrid);\r\n  }\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const y of grid) {\r\n    for (const node of y) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { posY, posX } = node;\r\n\r\n  if (posX > 0) neighbors.push(grid[posY][posX - 1]);\r\n  if (posY > 0) neighbors.push(grid[posY - 1][posX]);\r\n  if (posY < grid.length - 1) neighbors.push(grid[posY + 1][posX]);\r\n  if (posX < grid[0].length - 1) neighbors.push(grid[posY][posX + 1]);\r\n  if (node.posY % 2 !== 0) {\r\n    if (posY < grid.length - 1 && posX < grid[0].length - 1)\r\n      neighbors.push(grid[posY + 1][posX + 1]);\r\n    if (posY > 0 && posX < grid[0].length - 1)\r\n      neighbors.push(grid[posY - 1][posX + 1]);\r\n  } else {\r\n    if (posY < grid.length - 1 && posX > 0)\r\n      neighbors.push(grid[posY + 1][posX - 1]);\r\n    if (posY > 0 && posX > 0) neighbors.push(grid[posY - 1][posX - 1]);\r\n  }\r\n  return neighbors.filter((neighbor) => !(neighbor.type === \"wall\"));\r\n  //return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function resetNodes(grid) {\r\n  const newGrid = grid.slice();\r\n\r\n  for (const y of grid) {\r\n    for (const x of y) {\r\n      const newNode = {\r\n        ...x,\r\n        distance: Infinity,\r\n        finishDistance: Infinity,\r\n        previousNode: null,\r\n      };\r\n      newGrid[x.posY][x.posX] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  let pathcost = finishNode.distance;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  document.getElementById(\"labelPathLength\").innerHTML =\r\n    shortestPath.length - 1 + \"\";\r\n\r\n  document.getElementById(\"labelPathCost\").innerHTML = pathcost + \"\";\r\n  return shortestPath;\r\n}\r\n","import { getAllNodes, resetNodes, getUnvisitedNeighbors } from \"./dijkstra.js\";\r\n\r\nexport function astar(grid, startPos, finishPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"A*\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n  const finishNode = algoGrid[finishPos.y][finishPos.x];\r\n\r\n  startNode.distance = 0;\r\n  setFinishDist(startNode, finishNode);\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByFinishDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //skip wall\r\n    if (closestNode.type === \"wall\") continue;\r\n\r\n    //when closest node has distance infinity we are stuck -> stop\r\n    if (closestNode.distance === Infinity) {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode.type === \"finish\") {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, algoGrid, finishNode);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.finishDistance === Infinity)\r\n      setFinishDist(neighbor, finishNode);\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction setFinishDist(node, finishNode) {\r\n  const dist =\r\n    Math.round(\r\n      Math.sqrt(\r\n        Math.pow(node.posX - finishNode.posX, 2) +\r\n          Math.pow(node.posY - finishNode.posY, 2),\r\n        2\r\n      )\r\n    ) * 4;\r\n  node.finishDistance = dist;\r\n}\r\n\r\nfunction sortNodesByFinishDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(\r\n    (nodeA, nodeB) =>\r\n      nodeA.distance +\r\n      nodeA.finishDistance -\r\n      (nodeB.finishDistance + nodeB.distance)\r\n  );\r\n}\r\n","import {\r\n  getAllNodes,\r\n  resetNodes,\r\n  getUnvisitedNeighbors,\r\n  sortNodesByDistance,\r\n} from \"./dijkstra.js\";\r\n\r\n/*finishDist is used here for the distance of the second dijkstra*/\r\n\r\nexport function bidijkstra(grid, startPos, finishPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML =\r\n    \"Bidirectional-Dijkstra\";\r\n\r\n  const visitedNodesInOrder = [];\r\n  const visitedNodesInOrderBi = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const algoGridBi = algoGrid.slice();\r\n\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n  const finishNode = algoGrid[finishPos.y][finishPos.x];\r\n\r\n  startNode.distance = 0;\r\n\r\n  const startNodeBi = algoGridBi[finishPos.y][finishPos.x];\r\n  const finishNodeBi = algoGridBi[startPos.x][startPos.x];\r\n  startNodeBi.finishDistance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n  const unvisitedNodesBi = unvisitedNodes.slice();\r\n\r\n  while (!!unvisitedNodes.length || !!unvisitedNodesBi.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    sortNodesByFinishDistance(unvisitedNodesBi);\r\n\r\n    const closestNode = unvisitedNodes.shift();\r\n    const closestNodeBi = unvisitedNodesBi.shift();\r\n\r\n    if (closestNode.distance === Infinity) {\r\n      console.log(\"no route\");\r\n    } else if (!(closestNode.type === \"wall\")) {\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n\r\n      //if (!closestNode.finishDistance === Infinity) {return { visitedNodesInOrder, visitedNodesInOrderBi };}\r\n      const finishNode2 = updateUnvisitedNeighbors(closestNode, algoGrid);\r\n      if (!(finishNode2 === null)) {\r\n        return {\r\n          visitedNodesInOrder,\r\n          visitedNodesInOrderBi,\r\n          closestNode,\r\n          finishNode2,\r\n        };\r\n      }\r\n    }\r\n    if (closestNodeBi.finishDistance === Infinity) {\r\n      console.log(\"no route\");\r\n    } else if (!(closestNodeBi.type === \"wall\")) {\r\n      closestNodeBi.isVisited = true;\r\n      visitedNodesInOrderBi.push(closestNodeBi);\r\n\r\n      //if (!closestNodeBi.distance === Infinity) {return { visitedNodesInOrder, visitedNodesInOrderBi };}\r\n      const finishNode1 = updateUnvisitedNeighborsBi(closestNodeBi, algoGrid);\r\n      if (!(finishNode1 === null)) {\r\n        return {\r\n          visitedNodesInOrder,\r\n          visitedNodesInOrderBi,\r\n          finishNode1,\r\n          closestNodeBi,\r\n        };\r\n      }\r\n    }\r\n  }\r\n  console.log(\"Not returned-2\");\r\n  console.log(\"Bi:\");\r\n  console.log(visitedNodesInOrderBi);\r\n  console.log(\"Normal: \");\r\n  console.log(visitedNodesInOrder);\r\n}\r\n\r\nfunction sortNodesByFinishDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(\r\n    (nodeA, nodeB) => nodeA.finishDistance - nodeB.finishDistance\r\n  );\r\n}\r\n\r\nfunction updateUnvisitedNeighborsBi(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (!(neighbor.distance === Infinity && neighbor.isVisited)) {\r\n      console.log(\"return note from neighborsBi\");\r\n      return neighbor;\r\n    } else if (neighbor.finishDistance >= node.finishDistance + cost) {\r\n      neighbor.finishDistance = node.finishDistance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (!(neighbor.finishDistance === Infinity && neighbor.isVisited)) {\r\n      console.log(\"return note from neighbors .\");\r\n      console.log(neighbor);\r\n      return neighbor;\r\n    } else if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getShortestPathBidirectional(finishNode1, finishNode2) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode1;\r\n\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  currentNode = finishNode2;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  return shortestPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport InfoBox from \"./Ui/InfoBox\";\r\n\r\nimport \"./PathVisualizer.css\";\r\n\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport {\r\n  bidijkstra,\r\n  getShortestPathBidirectional,\r\n} from \"../algorithms/bi-dijkstra\";\r\n\r\nconst ACTION = {\r\n  WALL: \"wall\",\r\n  START: \"start\",\r\n  FINISH: \"finish\",\r\n  ROAD: \"road\",\r\n  DELETE: \"\",\r\n};\r\n\r\nconst ALGOS = {\r\n  DIJKSTRA: \"dijkstra\",\r\n  ASTAR: \"a-star\",\r\n  BIDIJKSTRA: \"bi-dijkstra\",\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      mouseAction: ACTION.WALL,\r\n      startNode: { y: 2, x: 3 },\r\n      finishNode: { y: 7, x: 8 },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getStartGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(posX, posY) {\r\n    const action = this.state.mouseAction;\r\n    if (\r\n      action === ACTION.WALL ||\r\n      action === ACTION.ROAD ||\r\n      action === ACTION.DELETE\r\n    ) {\r\n      const newGrid = getUpdateWallRoadGrid(\r\n        this.state.grid,\r\n        posX,\r\n        posY,\r\n        action\r\n      );\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n    if (action === ACTION.START || action === ACTION.FINISH) {\r\n      const newGrid = this.getUpdateStartFinishGrid(posX, posY, action);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(posX, posY) {\r\n    const action = this.state.mouseAction;\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (\r\n      action === ACTION.WALL ||\r\n      action === ACTION.ROAD ||\r\n      action === ACTION.DELETE\r\n    ) {\r\n      const newGrid = getUpdateWallRoadGrid(\r\n        this.state.grid,\r\n        posX,\r\n        posY,\r\n        action\r\n      );\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    const selectValue = document.getElementById(\"draw-selector\").value;\r\n    this.setState({ mouseIsPressed: false, mouseAction: selectValue });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPath) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      //at last i start animateShortestPath\r\n      if (i === visitedNodesInOrder.length) {\r\n        this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPath);\r\n        }, 50 * i);\r\n        return;\r\n      }\r\n      if (i < visitedNodesInOrder.length) {\r\n        //check if node is not start or finish\r\n        setTimeout(() => {\r\n          this.addNodeFocus(visitedNodesInOrder[i]);\r\n        }, 50 * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n          }, 50 * i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  animateDijkstraBidirectional(\r\n    visitedNodesInOrder,\r\n    visitedNodesInOrderBi,\r\n    nodesInShortestPath\r\n  ) {\r\n    let count = 0;\r\n    let countBi = 0;\r\n\r\n    while (\r\n      count < visitedNodesInOrder.length ||\r\n      countBi < visitedNodesInOrderBi.length\r\n    ) {\r\n      if (count < visitedNodesInOrder.length) {\r\n        if (count < visitedNodesInOrder.length) {\r\n          //check if node is not start or finish\r\n          setTimeout(() => {\r\n            this.addNodeFocus(visitedNodesInOrder[count]);\r\n          }, 50 * count);\r\n          //when i bigger 0 then change i-1 to is visited\r\n          if (count > 0) {\r\n            setTimeout(() => {\r\n              this.addNodeVisited(visitedNodesInOrder[count - 1]);\r\n            }, 50 * count);\r\n          }\r\n        }\r\n        count++;\r\n      }\r\n\r\n      if (countBi < visitedNodesInOrderBi.length) {\r\n        if (countBi < visitedNodesInOrderBi.length) {\r\n          //check if node is not start or finish\r\n          setTimeout(() => {\r\n            this.addNodeFocus(visitedNodesInOrderBi[countBi]);\r\n          }, 50 * countBi);\r\n          //when i bigger 0 then change i-1 to is visited\r\n          if (countBi > 0) {\r\n            setTimeout(() => {\r\n              this.addNodeVisited(visitedNodesInOrderBi[countBi - 1]);\r\n            }, 50 * countBi);\r\n          }\r\n        }\r\n        countBi++;\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.animateShortestPath(nodesInShortestPath);\r\n    }, 50 * (count + countBi));\r\n  }\r\n\r\n  animateDijkstraBidirectional2(\r\n    visitedNodesInOrder,\r\n    visitedNodesInOrderBi,\r\n    nodesInShortestPath\r\n  ) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      //at last i start animateShortestPath\r\n      if (i === visitedNodesInOrder.length + 1) {\r\n        this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPath);\r\n        }, 50 * i);\r\n      } else if (i < visitedNodesInOrder.length) {\r\n        //check if node is not start or finish\r\n        setTimeout(() => {\r\n          this.addNodeFocus(visitedNodesInOrder[i]);\r\n        }, 50 * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n          }, 50 * i);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i <= visitedNodesInOrderBi.length; i++) {\r\n      //at last i start animateShortestPath\r\n      if (i === visitedNodesInOrderBi.length + 1) {\r\n        this.addNodeVisited(visitedNodesInOrderBi[i - 1]);\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPath);\r\n        }, 50 * i);\r\n      } else if (i < visitedNodesInOrder.length) {\r\n        //check if node is not start or finish\r\n        setTimeout(() => {\r\n          this.addNodeFocus(visitedNodesInOrderBi[i]);\r\n        }, 50 * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisited(visitedNodesInOrderBi[i - 1]);\r\n          }, 50 * i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addNodeFocus(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n      nodeElement.classList.add(\"node-focus\");\r\n    }\r\n  }\r\n\r\n  addNodeVisited(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n\r\n      if (nodeElement.classList.contains(\"node-focus\")) {\r\n        nodeElement.classList.remove(\"node-focus\");\r\n      }\r\n      if (node.type === ACTION.ROAD) {\r\n        nodeElement.classList.add(\"node-visited-road\");\r\n      }\r\n      nodeElement.classList.add(\"node-visited\");\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPath) {\r\n    for (let i = 0; i < nodesInShortestPath.length; i++) {\r\n      if (checkClassnameChangeable(nodesInShortestPath[i])) {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPath[i];\r\n          const nodeElement = document.getElementById(\r\n            `node-${node.posX}-${node.posY}`\r\n          );\r\n          const rowOffset = node.rowOffset ? \"row-offset\" : \"\";\r\n          if (node.type === ACTION.ROAD) {\r\n            nodeElement.className = \"node node-shortest-path-road \" + rowOffset;\r\n          } else {\r\n            nodeElement.className = \"node node-shortest-path \" + rowOffset;\r\n          }\r\n        }, 50 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  startAlgo() {\r\n    this.clear(false);\r\n    const algo = document.getElementById(\"algo-selector\").value;\r\n    if (algo === ALGOS.DIJKSTRA) {\r\n      this.visualizeDijkstra();\r\n    }\r\n    if (algo === ALGOS.ASTAR) {\r\n      this.visualizeAStar();\r\n    }\r\n    if (algo === ALGOS.BIDIJKSTRA) {\r\n      this.visualizeBiDijkstra();\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = dijkstra(grid, startPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = astar(grid, startPos, finishPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  visualizeBiDijkstra() {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const {\r\n      visitedNodesInOrder,\r\n      visitedNodesInOrderBi,\r\n      closestNode,\r\n      finishNode2,\r\n    } = bidijkstra(grid, startPos, finishPos);\r\n\r\n    console.log(\"returned Values:.\");\r\n    console.log(visitedNodesInOrder);\r\n    console.log(visitedNodesInOrderBi);\r\n    console.log(closestNode);\r\n    console.log(finishNode2);\r\n\r\n    const nodesInShortestPath = getShortestPathBidirectional(\r\n      closestNode,\r\n      finishNode2\r\n    );\r\n\r\n    this.animateDijkstraBidirectional2(\r\n      visitedNodesInOrder,\r\n      visitedNodesInOrderBi,\r\n      nodesInShortestPath\r\n    );\r\n  }\r\n\r\n  setAction(action) {\r\n    this.setState({ mouseAction: action });\r\n  }\r\n\r\n  //clearAll -> when true clear Walls and Roads\r\n  clear(clearAll) {\r\n    const newGrid = this.state.grid;\r\n    for (const y of newGrid) {\r\n      for (const x of y) {\r\n        const newType =\r\n          clearAll && (x.type === ACTION.WALL || x.type === ACTION.ROAD)\r\n            ? \"\"\r\n            : x.type;\r\n\r\n        const node = {\r\n          ...x,\r\n          isVisited: false,\r\n          type: newType,\r\n        };\r\n        newGrid[x.posY][x.posX] = node;\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.posX}-${node.posY}`\r\n        );\r\n        const offset = x.rowOffset ? \"row-offset\" : \"\";\r\n        nodeElement.className = \"node \" + offset + \" \" + x.type;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n\r\n    clearLabels();\r\n  }\r\n\r\n  clearWallRoad() {\r\n    const newGrid = this.getStartGrid();\r\n    for (const y of newGrid) {\r\n      for (const x of y) {\r\n        const node = {\r\n          ...x,\r\n          isVisited: false,\r\n          type: x.type === ACTION.WALL ? \"\" : x.type,\r\n        };\r\n        newGrid[x.posY][x.posX] = node;\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.posX}-${node.posY}`\r\n        );\r\n        const offset = x.rowOffset ? \"row-offset\" : \"\";\r\n        nodeElement.className = \"node \" + offset + \" \" + x.type;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  changeDrawType(selectObj) {\r\n    const value = selectObj.value;\r\n    this.setState({ mouseAction: value });\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <div>\r\n        <div className={\"menu\"}>\r\n          <div className={\"box\"}>\r\n            <select id={\"algo-selector\"} defaultValue={ALGOS.DIJKSTRA}>\r\n              <option value={ALGOS.DIJKSTRA}>Dijkstra</option>\r\n              <option value={ALGOS.ASTAR}>A*</option>\r\n              <option value={ALGOS.BIDIJKSTRA}>Bi-Dijkstra</option>\r\n            </select>\r\n          </div>\r\n          <div className={\"box\"}>\r\n            <select\r\n              id={\"draw-selector\"}\r\n              onChange={() => this.changeDrawType(this)}\r\n              defaultValue={ACTION.WALL}\r\n            >\r\n              <option value={ACTION.WALL}>Wall</option>\r\n              <option value={ACTION.ROAD}>Road</option>\r\n              <option value={ACTION.DELETE}>Delete</option>\r\n            </select>\r\n          </div>\r\n          <button className={\"white-btn\"} onClick={() => this.clear(false)}>\r\n            Clear Path\r\n          </button>\r\n          <button className={\"startButton\"} onClick={() => this.startAlgo()}>\r\n            Start Search!\r\n          </button>\r\n          <button className={\"white-btn\"} onClick={() => this.clear(true)}>\r\n            Clear ALL\r\n          </button>\r\n          <button\r\n            id={\"setStartBtn\"}\r\n            className={\"btn\"}\r\n            onClick={() => this.setAction(ACTION.START)}\r\n          >\r\n            SetStart\r\n          </button>\r\n          <button\r\n            id={\"setFinishBtn\"}\r\n            className={\"btn\"}\r\n            onClick={() => this.setAction(ACTION.FINISH)}\r\n          >\r\n            SetFinish\r\n          </button>\r\n        </div>\r\n\r\n        <InfoBox />\r\n\r\n        <div className=\"grid\" id=\"griddiv\">\r\n          {grid.map((x, xId) => {\r\n            return (\r\n              <div key={xId}>\r\n                {x.map((node, nodeId) => {\r\n                  const { posX, posY, type, distance } = node;\r\n                  return (\r\n                    <Node\r\n                      rowOffset={xId % 2 === 0 ? false : true}\r\n                      key={nodeId}\r\n                      type={type}\r\n                      posX={posX}\r\n                      posY={posY}\r\n                      onMouseDown={(posX, posY) =>\r\n                        this.handleMouseDown(posX, posY)\r\n                      }\r\n                      onMouseEnter={(posX, posY) =>\r\n                        this.handleMouseEnter(posX, posY)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      distance={distance}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createNode(posX, posY) {\r\n    return {\r\n      posX,\r\n      posY,\r\n      type:\r\n        posX === this.state.startNode.x && posY === this.state.startNode.y\r\n          ? \"start\"\r\n          : posX === this.state.finishNode.x && posY === this.state.finishNode.y\r\n          ? \"finish\"\r\n          : \"\",\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      previousNode: null,\r\n      finishDistance: Infinity,\r\n      rowOffset: posY % 2 === 0 ? false : true,\r\n    };\r\n  }\r\n\r\n  getStartGrid() {\r\n    const grid = [];\r\n\r\n    let canvas = document.getElementById(\"griddiv\");\r\n    //console.log(canvas.getBoundingClientRect().width);\r\n\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n\r\n    let yAmount = 5;\r\n    let xAmount = 5;\r\n\r\n    if (width <= 600) {\r\n      yAmount = height / 32;\r\n      xAmount = width / 36;\r\n    } else {\r\n      xAmount = width / 52;\r\n      yAmount = height / 40;\r\n    }\r\n\r\n    for (let y = 0; y < yAmount; y++) {\r\n      const row = [];\r\n\r\n      for (let x = 0; x < xAmount; x++) {\r\n        const node = this.createNode(x, y);\r\n        row.push(node);\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  getUpdateStartFinishGrid(posX, posY, action) {\r\n    const newGrid = this.state.grid;\r\n\r\n    let oldX = this.state.finishNode.x;\r\n    let oldY = this.state.finishNode.y;\r\n\r\n    if (action === ACTION.START) {\r\n      oldX = this.state.startNode.x;\r\n      oldY = this.state.startNode.y;\r\n    }\r\n\r\n    const oldNode = newGrid[oldY][oldX];\r\n    const newNode = {\r\n      ...oldNode,\r\n      type: \"\",\r\n    };\r\n    newGrid[oldY][oldX] = newNode;\r\n\r\n    const newStart = newGrid[posY][posX];\r\n    const theNewStart = {\r\n      ...newStart,\r\n      type: action,\r\n    };\r\n    newGrid[posY][posX] = theNewStart;\r\n\r\n    if (action === ACTION.START) {\r\n      this.setState({ startNode: { y: posY, x: posX } });\r\n      return newGrid;\r\n    } else {\r\n      this.setState({ finishNode: { y: posY, x: posX } });\r\n      return newGrid;\r\n    }\r\n  }\r\n}\r\n\r\nconst getUpdateWallRoadGrid = (grid, x, y, action) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[y][x];\r\n  if (node.type === \"start\" || node.type === \"finish\") {\r\n    return newGrid;\r\n  }\r\n  const newNode = {\r\n    ...node,\r\n    type: action,\r\n  };\r\n  newGrid[y][x] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst checkClassnameChangeable = (node) => {\r\n  if (node.type === \"start\" || node.type === \"finish\") {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst clearLabels = () => {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML =\r\n    document.getElementById(\"algo-selector\").value;\r\n  document.getElementById(\"labelSpeed\").innerHTML = \"--\";\r\n  document.getElementById(\"labelNodesVisited\").innerHTML = \"--\";\r\n  document.getElementById(\"labelPathLength\").innerHTML = \"--\";\r\n  document.getElementById(\"labelPathCost\").innerHTML = \"--\";\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathVisualizer from './PathVisualizer/PathVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathVisualizer></PathVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}