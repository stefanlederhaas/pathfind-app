{"version":3,"sources":["PathVisualizer/Node/Node.jsx","PathVisualizer/Ui/InfoBox.jsx","algorithms/dijkstra.js","algorithms/astar.js","algorithms/bi-dijkstra.js","PathVisualizer/PathVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","rowOffset","type","posX","posY","onMouseDown","onMouseEnter","onMouseUp","classOffset","id","className","Component","InfoBox","getAllNodes","grid","nodes","y","node","push","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","length","filter","resetNodes","newGrid","slice","x","newNode","Infinity","finishDistance","getShortestPath","finishNode","shortestPath","currentNode","pathcost","unshift","document","getElementById","innerHTML","finishTimer","startTime","time","window","performance","now","toFixed","setFinishDist","dist","Math","round","sqrt","pow","sortNodesByFinishDistance","updateUnvisitedNeighborsBi","isVisited","isVisitedBi","ACTION","ALGOS","SPEED","PathfindingVisualizer","state","mouseIsPressed","mouseAction","startNode","getStartGrid","setState","action","getUpdateWallRoadGrid","getUpdateStartFinishGrid","selectValue","value","visitedNodesInOrder","nodesInShortestPath","i","setTimeout","addNodeVisited","animateShortestPath","addNodeFocus","visitedNodesInOrderBi","addNodeVisitedBi","addNodeFocusBi","visitedNode","checkClassnameChangeable","classList","add","nodeElement","contains","remove","clear","algo","visualizeDijkstra","visualizeAStar","visualizeBiDijkstra","visualizeBFS","visualizeDFS","startPos","finishPos","algoGrid","closestNode","shift","dijkstra","animateDijkstra","astar","algoGridBi","unvisitedNodesBi","closestNodeBi","finishNode2","finishNode1","bidijkstra","addCost","getShortestPathBidirectional","animateDijkstraBidirectional","index","some","n","bfs","dfs_r","finishFound","discoverNodesR","openNeighbors","floor","random","discoverNodes","dfs","clearAll","newType","offset","clearLabels","selectObj","defaultValue","onChange","changeDrawType","onClick","startAlgo","setAction","map","xId","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","getBoundingClientRect","width","height","yAmount","xAmount","row","createNode","oldX","oldY","oldNode","newStart","theNewStart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.94141820.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      rowOffset,\r\n      type,\r\n      posX,\r\n      posY,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    const classOffset = rowOffset ? \"row-offset\" : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${posX}-${posY}`}\r\n        className={`node ${classOffset} ${type}`}\r\n        onMouseDown={() => onMouseDown(posX, posY)}\r\n        onMouseEnter={() => onMouseEnter(posX, posY)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nexport default class InfoBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"infobox\">\r\n        <div className=\"info\">\r\n          <div className=\"info-top\">\r\n            <div className=\"infoFlex\">\r\n              <label id=\"algo-text\">Algorithm:</label>\r\n              <label id=\"labelAlgorithm\">--</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"info-center\">\r\n            <div className=\"info-left info-side\">\r\n              <div className=\"infoFlex\">\r\n                <label>Speed:</label>\r\n                <label id=\"labelSpeed\">--</label>\r\n              </div>\r\n              <div className=\"infoFlex\">\r\n                <label>NodesVisited:</label>\r\n                <label id=\"labelNodesVisited\">--</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"info-right info-side\">\r\n              <div className=\"infoFlex\">\r\n                <label>Path-Length:</label>\r\n                <label id=\"labelPathLength\">--</label>\r\n              </div>\r\n              <div className=\"infoFlex\">\r\n                <label>Path-Cost:</label>\r\n                <label id=\"labelPathCost\">--</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"Dijkstra\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n\r\n  startNode.distance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //skip wall\r\n    if (closestNode.type === \"wall\") continue;\r\n\r\n    //when closest node has distance infinity we are stuck -> stop\r\n    if (closestNode.distance === Infinity) {\r\n      finishTimer(startTime);\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode.type === \"finish\") {\r\n      finishTimer(startTime);\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, algoGrid);\r\n  }\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const y of grid) {\r\n    for (const node of y) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { posY, posX } = node;\r\n\r\n  if (posX > 0) neighbors.push(grid[posY][posX - 1]);\r\n  if (posY > 0) neighbors.push(grid[posY - 1][posX]);\r\n  if (posY < grid.length - 1) neighbors.push(grid[posY + 1][posX]);\r\n  if (posX < grid[0].length - 1) neighbors.push(grid[posY][posX + 1]);\r\n  if (node.posY % 2 !== 0) {\r\n    if (posY < grid.length - 1 && posX < grid[0].length - 1)\r\n      neighbors.push(grid[posY + 1][posX + 1]);\r\n    if (posY > 0 && posX < grid[0].length - 1)\r\n      neighbors.push(grid[posY - 1][posX + 1]);\r\n  } else {\r\n    if (posY < grid.length - 1 && posX > 0)\r\n      neighbors.push(grid[posY + 1][posX - 1]);\r\n    if (posY > 0 && posX > 0) neighbors.push(grid[posY - 1][posX - 1]);\r\n  }\r\n  return neighbors.filter((neighbor) => !(neighbor.type === \"wall\"));\r\n  //return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function resetNodes(grid) {\r\n  const newGrid = grid.slice();\r\n\r\n  for (const y of grid) {\r\n    for (const x of y) {\r\n      const newNode = {\r\n        ...x,\r\n        distance: Infinity,\r\n        finishDistance: Infinity,\r\n        previousNode: null,\r\n      };\r\n      newGrid[x.posY][x.posX] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  let pathcost = finishNode.distance;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  document.getElementById(\"labelPathLength\").innerHTML =\r\n    shortestPath.length - 1 + \"\";\r\n\r\n  document.getElementById(\"labelPathCost\").innerHTML = pathcost + \"\";\r\n  return shortestPath;\r\n}\r\n\r\nexport function finishTimer(startTime) {\r\n  const endTime = window.performance.now();\r\n  const time = endTime - startTime;\r\n\r\n  document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n}\r\n","import {\r\n  getAllNodes,\r\n  resetNodes,\r\n  getUnvisitedNeighbors,\r\n  finishTimer,\r\n} from \"./dijkstra.js\";\r\n\r\nexport function astar(grid, startPos, finishPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"A*\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n  const finishNode = algoGrid[finishPos.y][finishPos.x];\r\n\r\n  startNode.distance = 0;\r\n  setFinishDist(startNode, finishNode);\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByFinishDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //skip wall\r\n    if (closestNode.type === \"wall\") continue;\r\n\r\n    //when closest node has distance infinity we are stuck -> stop\r\n    if (closestNode.distance === Infinity) {\r\n      finishTimer(startTime);\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode.type === \"finish\") {\r\n      finishTimer(startTime);\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, algoGrid, finishNode);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.finishDistance === Infinity)\r\n      setFinishDist(neighbor, finishNode);\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction setFinishDist(node, finishNode) {\r\n  const dist =\r\n    Math.round(\r\n      Math.sqrt(\r\n        Math.pow(node.posX - finishNode.posX, 2) +\r\n          Math.pow(node.posY - finishNode.posY, 2),\r\n        2\r\n      )\r\n    ) * 4;\r\n  node.finishDistance = dist;\r\n}\r\n\r\nfunction sortNodesByFinishDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(\r\n    (nodeA, nodeB) =>\r\n      nodeA.distance +\r\n      nodeA.finishDistance -\r\n      (nodeB.finishDistance + nodeB.distance)\r\n  );\r\n}\r\n","import {\r\n  getAllNodes,\r\n  resetNodes,\r\n  getUnvisitedNeighbors,\r\n  sortNodesByDistance,\r\n  finishTimer,\r\n} from \"./dijkstra.js\";\r\n\r\n/*finishDist is used here for the distance of the second dijkstra*/\r\n\r\nexport function bidijkstra(grid, startPos, finishPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML =\r\n    \"Bidirectional-Dijkstra\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n  const visitedNodesInOrderBi = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const algoGridBi = algoGrid.slice();\r\n\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n\r\n  startNode.distance = 0;\r\n\r\n  const startNodeBi = algoGridBi[finishPos.y][finishPos.x];\r\n\r\n  startNodeBi.finishDistance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n  const unvisitedNodesBi = unvisitedNodes.slice();\r\n\r\n  while (!!unvisitedNodes.length || !!unvisitedNodesBi.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    sortNodesByFinishDistance(unvisitedNodesBi);\r\n\r\n    const closestNode = unvisitedNodes.shift();\r\n    const closestNodeBi = unvisitedNodesBi.shift();\r\n\r\n    if (\r\n      !(closestNode.type === \"wall\") &&\r\n      !(closestNode.distance === Infinity)\r\n    ) {\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n\r\n      //if (!closestNode.finishDistance === Infinity) {return { visitedNodesInOrder, visitedNodesInOrderBi };}\r\n      const finishNode2 = updateUnvisitedNeighbors(closestNode, algoGrid);\r\n      if (!(finishNode2 === null)) {\r\n        finishTimer(startTime);\r\n        return {\r\n          visitedNodesInOrder,\r\n          visitedNodesInOrderBi,\r\n          closestNode,\r\n          finishNode2,\r\n        };\r\n      }\r\n    }\r\n    if (\r\n      !(closestNodeBi.type === \"wall\") &&\r\n      !(closestNodeBi.finishDistance === Infinity)\r\n    ) {\r\n      closestNodeBi.isVisitedBi = true;\r\n      visitedNodesInOrderBi.push(closestNodeBi);\r\n\r\n      //if (!closestNodeBi.distance === Infinity) {return { visitedNodesInOrder, visitedNodesInOrderBi };}\r\n      const finishNode1 = updateUnvisitedNeighborsBi(closestNodeBi, algoGrid);\r\n\r\n      closestNode = finishNode1;\r\n      const finishNode2 = closestNodeBi;\r\n\r\n      if (!(finishNode1 === null)) {\r\n        finishTimer(startTime);\r\n        return {\r\n          visitedNodesInOrder,\r\n          visitedNodesInOrderBi,\r\n          closestNode,\r\n          finishNode2,\r\n        };\r\n      }\r\n    }\r\n  }\r\n  finishTimer(startTime);\r\n\r\n  return {\r\n    visitedNodesInOrder,\r\n    visitedNodesInOrderBi,\r\n  };\r\n}\r\n\r\nfunction sortNodesByFinishDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(\r\n    (nodeA, nodeB) => nodeA.finishDistance - nodeB.finishDistance\r\n  );\r\n}\r\n\r\nfunction updateUnvisitedNeighborsBi(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (!(neighbor.distance === Infinity) && neighbor.isVisited) {\r\n      return neighbor;\r\n    } else if (neighbor.finishDistance >= node.finishDistance + cost) {\r\n      if (neighbor.distance === Infinity) {\r\n        neighbor.finishDistance = node.finishDistance + cost;\r\n        neighbor.previousNode = node;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (!(neighbor.finishDistance === Infinity) && neighbor.isVisitedBi) {\r\n      return neighbor;\r\n    } else if (neighbor.distance >= node.distance + cost) {\r\n      if (neighbor.finishDistance === Infinity) {\r\n        neighbor.distance = node.distance + cost;\r\n        neighbor.previousNode = node;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getShortestPathBidirectional(finishNode1, finishNode2) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode1;\r\n\r\n  //cost from finishNode1 to finishNode 2\r\n  let addCost = finishNode2.type === \"road\" ? 2 : 4;\r\n  let pathcost = finishNode1.distance + finishNode2.finishDistance + addCost;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  currentNode = finishNode2;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  document.getElementById(\"labelPathLength\").innerHTML =\r\n    shortestPath.length - 1 + \"\";\r\n  document.getElementById(\"labelPathCost\").innerHTML = pathcost + \"\";\r\n  return shortestPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport InfoBox from \"./Ui/InfoBox\";\r\n\r\nimport \"./PathVisualizer.css\";\r\n\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport {\r\n  bidijkstra,\r\n  getShortestPathBidirectional,\r\n} from \"../algorithms/bi-dijkstra\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\n\r\nconst ACTION = {\r\n  WALL: \"wall\",\r\n  START: \"start\",\r\n  FINISH: \"finish\",\r\n  ROAD: \"road\",\r\n  DELETE: \"\",\r\n};\r\n\r\nconst ALGOS = {\r\n  DIJKSTRA: \"dijkstra\",\r\n  ASTAR: \"a-star\",\r\n  BIDIJKSTRA: \"bi-dijkstra\",\r\n  BFS: \"bfs\",\r\n  DFS: \"dfs\",\r\n  DFS_R: \"dfs-r\",\r\n};\r\n\r\nconst SPEED = {\r\n  SLOW: 400,\r\n  MEDIUM: 200,\r\n  FAST: 100,\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      mouseAction: ACTION.WALL,\r\n      startNode: { y: 2, x: 3 },\r\n      finishNode: { y: 7, x: 8 },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getStartGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(posX, posY) {\r\n    const action = this.state.mouseAction;\r\n    if (\r\n      action === ACTION.WALL ||\r\n      action === ACTION.ROAD ||\r\n      action === ACTION.DELETE\r\n    ) {\r\n      const newGrid = getUpdateWallRoadGrid(\r\n        this.state.grid,\r\n        posX,\r\n        posY,\r\n        action\r\n      );\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n    if (action === ACTION.START || action === ACTION.FINISH) {\r\n      const newGrid = this.getUpdateStartFinishGrid(posX, posY, action);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(posX, posY) {\r\n    const action = this.state.mouseAction;\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (\r\n      action === ACTION.WALL ||\r\n      action === ACTION.ROAD ||\r\n      action === ACTION.DELETE\r\n    ) {\r\n      const newGrid = getUpdateWallRoadGrid(\r\n        this.state.grid,\r\n        posX,\r\n        posY,\r\n        action\r\n      );\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    const selectValue = document.getElementById(\"draw-selector\").value;\r\n    this.setState({ mouseIsPressed: false, mouseAction: selectValue });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPath) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      //at last i start animateShortestPath\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n          this.animateShortestPath(nodesInShortestPath);\r\n        }, SPEED.FAST * i);\r\n        return;\r\n      }\r\n      if (i < visitedNodesInOrder.length) {\r\n        //check if node is not start or finish\r\n        setTimeout(() => {\r\n          this.addNodeFocus(visitedNodesInOrder[i]);\r\n        }, SPEED.FAST * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n          }, SPEED.FAST * i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  animateDijkstraBidirectional(\r\n    visitedNodesInOrder,\r\n    visitedNodesInOrderBi,\r\n    nodesInShortestPath\r\n  ) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n        }, 200 * i);\r\n      } else if (i < visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.addNodeFocus(visitedNodesInOrder[i]);\r\n        }, 200 * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n          }, 200 * i);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i <= visitedNodesInOrderBi.length; i++) {\r\n      //at last i start animateShortestPath\r\n      if (i === visitedNodesInOrderBi.length) {\r\n        setTimeout(() => {\r\n          this.addNodeVisitedBi(visitedNodesInOrderBi[i - 1]);\r\n        }, 100 + 200 * i);\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPath);\r\n        }, 200 + 200 * i);\r\n      } else if (i < visitedNodesInOrderBi.length) {\r\n        setTimeout(() => {\r\n          this.addNodeFocusBi(visitedNodesInOrderBi[i]);\r\n        }, 100 + 200 * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisitedBi(visitedNodesInOrderBi[i - 1]);\r\n          }, 100 + 200 * i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addNodeFocus(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n      nodeElement.classList.add(\"node-focus\");\r\n    }\r\n  }\r\n\r\n  addNodeFocusBi(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n      nodeElement.classList.add(\"node-focus-bi\");\r\n    }\r\n  }\r\n\r\n  addNodeVisited(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n\r\n      if (nodeElement.classList.contains(\"node-focus\")) {\r\n        nodeElement.classList.remove(\"node-focus\");\r\n      }\r\n      if (node.type === ACTION.ROAD) {\r\n        nodeElement.classList.add(\"node-visited-road\");\r\n      }\r\n      nodeElement.classList.add(\"node-visited\");\r\n    }\r\n  }\r\n\r\n  addNodeVisitedBi(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n\r\n      if (nodeElement.classList.contains(\"node-focus-bi\")) {\r\n        nodeElement.classList.remove(\"node-focus-bi\");\r\n      }\r\n      if (node.type === ACTION.ROAD) {\r\n        nodeElement.classList.add(\"node-visited-road\");\r\n      }\r\n      nodeElement.classList.add(\"node-visited-bi\");\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPath) {\r\n    for (let i = 0; i < nodesInShortestPath.length; i++) {\r\n      if (checkClassnameChangeable(nodesInShortestPath[i])) {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPath[i];\r\n          const nodeElement = document.getElementById(\r\n            `node-${node.posX}-${node.posY}`\r\n          );\r\n          const rowOffset = node.rowOffset ? \"row-offset\" : \"\";\r\n          if (node.type === ACTION.ROAD) {\r\n            nodeElement.className = \"node node-shortest-path-road \" + rowOffset;\r\n          } else {\r\n            nodeElement.className = \"node node-shortest-path \" + rowOffset;\r\n          }\r\n        }, SPEED.FAST * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  startAlgo() {\r\n    this.clear(false);\r\n    const algo = document.getElementById(\"algo-selector\").value;\r\n    if (algo === ALGOS.DIJKSTRA) {\r\n      this.visualizeDijkstra();\r\n    } else if (algo === ALGOS.ASTAR) {\r\n      this.visualizeAStar();\r\n    } else if (algo === ALGOS.BIDIJKSTRA) {\r\n      this.visualizeBiDijkstra();\r\n    } else if (algo === ALGOS.BFS) {\r\n      this.visualizeBFS();\r\n    } else if (algo === ALGOS.DFS) {\r\n      this.visualizeDFS(false);\r\n    } else if (algo === ALGOS.DFS_R) {\r\n      this.visualizeDFS(true);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = dijkstra(grid, startPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = astar(grid, startPos, finishPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  visualizeBiDijkstra() {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const {\r\n      visitedNodesInOrder,\r\n      visitedNodesInOrderBi,\r\n      closestNode,\r\n      finishNode2,\r\n    } = bidijkstra(grid, startPos, finishPos);\r\n\r\n    document.getElementById(\"labelNodesVisited\").innerHTML =\r\n      visitedNodesInOrder.length -\r\n      1 +\r\n      visitedNodesInOrderBi.length -\r\n      1 +\r\n      \" Nodes\";\r\n\r\n    const nodesInShortestPath =\r\n      closestNode == null || finishNode2 == null\r\n        ? []\r\n        : getShortestPathBidirectional(closestNode, finishNode2);\r\n\r\n    this.animateDijkstraBidirectional(\r\n      visitedNodesInOrder,\r\n      visitedNodesInOrderBi,\r\n      nodesInShortestPath\r\n    );\r\n  }\r\n\r\n  visualizeBFS() {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = bfs(grid, startPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  visualizeDFS(dfs_r) {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = dfs(grid, startPos, dfs_r);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  setAction(action) {\r\n    this.setState({ mouseAction: action });\r\n  }\r\n\r\n  //clearAll -> when true clear Walls and Roads\r\n  clear(clearAll) {\r\n    const newGrid = this.state.grid;\r\n    for (const y of newGrid) {\r\n      for (const x of y) {\r\n        const newType =\r\n          clearAll && (x.type === ACTION.WALL || x.type === ACTION.ROAD)\r\n            ? \"\"\r\n            : x.type;\r\n\r\n        const node = {\r\n          ...x,\r\n          isVisited: false,\r\n          isVisitedBi: false,\r\n          type: newType,\r\n        };\r\n        newGrid[x.posY][x.posX] = node;\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.posX}-${node.posY}`\r\n        );\r\n        const offset = x.rowOffset ? \"row-offset\" : \"\";\r\n        nodeElement.className = \"node \" + offset + \" \" + x.type;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n\r\n    clearLabels();\r\n  }\r\n\r\n  clearWallRoad() {\r\n    const newGrid = this.getStartGrid();\r\n    for (const y of newGrid) {\r\n      for (const x of y) {\r\n        const node = {\r\n          ...x,\r\n          isVisited: false,\r\n          type: x.type === ACTION.WALL ? \"\" : x.type,\r\n        };\r\n        newGrid[x.posY][x.posX] = node;\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.posX}-${node.posY}`\r\n        );\r\n        const offset = x.rowOffset ? \"row-offset\" : \"\";\r\n        nodeElement.className = \"node \" + offset + \" \" + x.type;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  changeDrawType(selectObj) {\r\n    const value = selectObj.value;\r\n    this.setState({ mouseAction: value });\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <div className=\"noscroll\">\r\n        <div className={\"menu\"}>\r\n          <div className={\"box\"}>\r\n            <select id={\"algo-selector\"} defaultValue={ALGOS.DIJKSTRA}>\r\n              <option value={ALGOS.DIJKSTRA}>Dijkstra</option>\r\n              <option value={ALGOS.ASTAR}>A*</option>\r\n              <option value={ALGOS.BIDIJKSTRA}>Bi-Dijkstra</option>\r\n              <option value={ALGOS.BFS}>BFS</option>\r\n              <option value={ALGOS.DFS}>DFS</option>\r\n              <option value={ALGOS.DFS_R}>DFS-R</option>\r\n            </select>\r\n          </div>\r\n          <div className={\"box\"}>\r\n            <select\r\n              id={\"draw-selector\"}\r\n              onChange={() => this.changeDrawType(this)}\r\n              defaultValue={ACTION.WALL}\r\n            >\r\n              <option value={ACTION.WALL}>Wall</option>\r\n              <option value={ACTION.ROAD}>Road</option>\r\n              <option value={ACTION.DELETE}>Delete</option>\r\n            </select>\r\n          </div>\r\n          <button className={\"white-btn\"} onClick={() => this.clear(false)}>\r\n            Clear Path\r\n          </button>\r\n          <button className={\"startButton\"} onClick={() => this.startAlgo()}>\r\n            Start Search!\r\n          </button>\r\n          <button className={\"white-btn\"} onClick={() => this.clear(true)}>\r\n            Clear ALL\r\n          </button>\r\n          <button\r\n            id={\"setStartBtn\"}\r\n            className={\"btn\"}\r\n            onClick={() => this.setAction(ACTION.START)}\r\n          >\r\n            SetStart\r\n          </button>\r\n          <button\r\n            id={\"setFinishBtn\"}\r\n            className={\"btn\"}\r\n            onClick={() => this.setAction(ACTION.FINISH)}\r\n          >\r\n            SetFinish\r\n          </button>\r\n        </div>\r\n\r\n        <InfoBox />\r\n\r\n        <div className=\"grid\" id=\"griddiv\">\r\n          {grid.map((x, xId) => {\r\n            return (\r\n              <div key={xId}>\r\n                {x.map((node, nodeId) => {\r\n                  const { posX, posY, type, distance } = node;\r\n                  return (\r\n                    <Node\r\n                      rowOffset={xId % 2 === 0 ? false : true}\r\n                      key={nodeId}\r\n                      type={type}\r\n                      posX={posX}\r\n                      posY={posY}\r\n                      onMouseDown={(posX, posY) =>\r\n                        this.handleMouseDown(posX, posY)\r\n                      }\r\n                      onMouseEnter={(posX, posY) =>\r\n                        this.handleMouseEnter(posX, posY)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      distance={distance}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createNode(posX, posY) {\r\n    return {\r\n      posX,\r\n      posY,\r\n      type:\r\n        posX === this.state.startNode.x && posY === this.state.startNode.y\r\n          ? \"start\"\r\n          : posX === this.state.finishNode.x && posY === this.state.finishNode.y\r\n          ? \"finish\"\r\n          : \"\",\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isVisitedBi: false,\r\n      previousNode: null,\r\n      finishDistance: Infinity,\r\n      rowOffset: posY % 2 === 0 ? false : true,\r\n    };\r\n  }\r\n\r\n  getStartGrid() {\r\n    const grid = [];\r\n\r\n    let canvas = document.getElementById(\"griddiv\");\r\n    //console.log(canvas.getBoundingClientRect().width);\r\n\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n\r\n    let yAmount = 5;\r\n    let xAmount = 5;\r\n\r\n    if (width <= 600) {\r\n      yAmount = height / 32;\r\n      xAmount = width / 36;\r\n    } else {\r\n      xAmount = width / 52;\r\n      yAmount = height / 40;\r\n    }\r\n\r\n    for (let y = 0; y < yAmount; y++) {\r\n      const row = [];\r\n\r\n      for (let x = 0; x < xAmount; x++) {\r\n        const node = this.createNode(x, y);\r\n        row.push(node);\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  getUpdateStartFinishGrid(posX, posY, action) {\r\n    const newGrid = this.state.grid;\r\n\r\n    let oldX = this.state.finishNode.x;\r\n    let oldY = this.state.finishNode.y;\r\n\r\n    if (action === ACTION.START) {\r\n      oldX = this.state.startNode.x;\r\n      oldY = this.state.startNode.y;\r\n    }\r\n\r\n    const oldNode = newGrid[oldY][oldX];\r\n    const newNode = {\r\n      ...oldNode,\r\n      type: \"\",\r\n    };\r\n    newGrid[oldY][oldX] = newNode;\r\n\r\n    const newStart = newGrid[posY][posX];\r\n    const theNewStart = {\r\n      ...newStart,\r\n      type: action,\r\n    };\r\n    newGrid[posY][posX] = theNewStart;\r\n\r\n    if (action === ACTION.START) {\r\n      this.setState({ startNode: { y: posY, x: posX } });\r\n      return newGrid;\r\n    } else {\r\n      this.setState({ finishNode: { y: posY, x: posX } });\r\n      return newGrid;\r\n    }\r\n  }\r\n}\r\n\r\nconst getUpdateWallRoadGrid = (grid, x, y, action) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[y][x];\r\n  if (node.type === \"start\" || node.type === \"finish\") {\r\n    return newGrid;\r\n  }\r\n  const newNode = {\r\n    ...node,\r\n    type: action,\r\n  };\r\n  newGrid[y][x] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst checkClassnameChangeable = (node) => {\r\n  if (node.type === \"start\" || node.type === \"finish\") {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst clearLabels = () => {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML =\r\n    document.getElementById(\"algo-selector\").value;\r\n  document.getElementById(\"labelSpeed\").innerHTML = \"--\";\r\n  document.getElementById(\"labelNodesVisited\").innerHTML = \"--\";\r\n  document.getElementById(\"labelPathLength\").innerHTML = \"--\";\r\n  document.getElementById(\"labelPathCost\").innerHTML = \"--\";\r\n};\r\n","import { resetNodes, getUnvisitedNeighbors, finishTimer } from \"./dijkstra.js\";\r\n\r\nexport function bfs(grid, startPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"Breadth-First-Search\";\r\n  const startTime = window.performance.now();\r\n\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n\r\n  let index = 0;\r\n  visitedNodesInOrder.push(startNode);\r\n\r\n  while (index < visitedNodesInOrder.length) {\r\n    const neighbors = getUnvisitedNeighbors(\r\n      visitedNodesInOrder[index],\r\n      algoGrid\r\n    );\r\n\r\n    for (const neighbor of neighbors) {\r\n      const condition = visitedNodesInOrder.some(\r\n        (n) => n.posX === neighbor.posX && n.posY === neighbor.posY\r\n      );\r\n\r\n      if (!condition) {\r\n        visitedNodesInOrder.push(neighbor);\r\n        neighbor.previousNode = visitedNodesInOrder[index];\r\n\r\n        if (neighbor.type === \"finish\") {\r\n          finishTimer(startTime);\r\n          document.getElementById(\"labelNodesVisited\").innerHTML =\r\n            visitedNodesInOrder.length - 1 + \" Nodes\";\r\n          return visitedNodesInOrder;\r\n        }\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n  finishTimer(startTime);\r\n  document.getElementById(\"labelNodesVisited\").innerHTML =\r\n    visitedNodesInOrder.length - 1 + \" Nodes\";\r\n  return visitedNodesInOrder;\r\n}\r\n","import { resetNodes, getUnvisitedNeighbors, finishTimer } from \"./dijkstra.js\";\r\n\r\nexport function dfs(grid, startPos, dfs_r) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"Breadth-First-Search\";\r\n  const startTime = window.performance.now();\r\n\r\n  const visitedNodesInOrder = [];\r\n  let finishFound = false;\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n  startNode.isVisited = true;\r\n  if (dfs_r) {\r\n    document.getElementById(\"labelAlgorithm\").innerHTML =\r\n      \"Breadth-First-Search Random\";\r\n    discoverNodesR(startNode, algoGrid);\r\n  } else {\r\n    document.getElementById(\"labelAlgorithm\").innerHTML =\r\n      \"Breadth-First-Search\";\r\n    discoverNodes(startNode, algoGrid);\r\n  }\r\n\r\n  finishTimer(startTime);\r\n  document.getElementById(\"labelNodesVisited\").innerHTML =\r\n    visitedNodesInOrder.length - 1 + \" Nodes\";\r\n\r\n  return visitedNodesInOrder;\r\n\r\n  function discoverNodesR(node, grid) {\r\n    if (!finishFound) {\r\n      const openNeighbors = getUnvisitedNeighbors(node, grid).filter(\r\n        (node) => !node.isVisited\r\n      );\r\n\r\n      if (!(node.type === \"finish\")) {\r\n        if (openNeighbors.length > 0) {\r\n          const neighbor =\r\n            openNeighbors[Math.floor(Math.random() * openNeighbors.length)];\r\n          neighbor.isVisited = true;\r\n          neighbor.previousNode = node;\r\n          visitedNodesInOrder.push(neighbor);\r\n          discoverNodesR(neighbor, grid);\r\n        } else if (!(node.previousNode == null)) {\r\n          discoverNodesR(node.previousNode, grid);\r\n        }\r\n      } else {\r\n        finishFound = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  function discoverNodes(node, grid) {\r\n    if (!finishFound) {\r\n      const openNeighbors = getUnvisitedNeighbors(node, grid).filter(\r\n        (node) => !node.isVisited\r\n      );\r\n\r\n      if (!(node.type === \"finish\")) {\r\n        if (openNeighbors.length > 0) {\r\n          const neighbor = openNeighbors[0];\r\n          neighbor.isVisited = true;\r\n          neighbor.previousNode = node;\r\n          visitedNodesInOrder.push(neighbor);\r\n          discoverNodes(neighbor, grid);\r\n        } else if (!(node.previousNode == null)) {\r\n          discoverNodes(node.previousNode, grid);\r\n        }\r\n      } else {\r\n        finishFound = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport PathVisualizer from './PathVisualizer/PathVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathVisualizer></PathVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}