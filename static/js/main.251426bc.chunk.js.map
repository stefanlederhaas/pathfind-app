{"version":3,"sources":["PathVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","PathVisualizer/PathVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","rowOffset","type","posX","posY","onMouseDown","onMouseEnter","onMouseUp","classOffset","id","className","Component","getAllNodes","grid","nodes","y","node","push","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","length","filter","resetNodes","newGrid","slice","x","newNode","Infinity","finishDistance","getShortestPath","finishNode","shortestPath","currentNode","unshift","document","getElementById","innerHTML","setFinishDist","dist","Math","round","sqrt","pow","sortNodesByFinishDistance","ACTION","ALGOS","PathfindingVisualizer","state","mouseIsPressed","mouseAction","startNode","getStartGrid","setState","action","getUpdateWallRoadGrid","getUpdateStartFinishGrid","selectValue","value","visitedNodesInOrder","nodesInShortestPath","i","addNodeVisited","setTimeout","animateShortestPath","addNodeFocus","visitedNode","checkClassnameChangeable","classList","add","nodeElement","contains","remove","clear","algo","visualizeDijkstra","visualizeAStar","startPos","finishPos","startTime","window","performance","now","algoGrid","closestNode","shift","time","toFixed","isVisited","dijkstra","animateDijkstra","astar","clearAll","newType","offset","selectObj","defaultValue","onChange","changeDrawType","onClick","startAlgo","setAction","map","xId","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","getBoundingClientRect","width","height","yAmount","xAmount","row","createNode","oldX","oldY","oldNode","newStart","theNewStart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.251426bc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      rowOffset,\r\n      type,\r\n      posX,\r\n      posY,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    const classOffset = rowOffset ? \"row-offset\" : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${posX}-${posY}`}\r\n        className={`node ${classOffset} ${type}`}\r\n        onMouseDown={() => onMouseDown(posX, posY)}\r\n        onMouseEnter={() => onMouseEnter(posX, posY)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"Dijkstra\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n\r\n  startNode.distance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //skip wall\r\n    if (closestNode.type === \"wall\") continue;\r\n\r\n    //when closest node has distance infinity we are stuck -> stop\r\n    if (closestNode.distance === Infinity) {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode.type === \"finish\") {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, algoGrid);\r\n  }\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const y of grid) {\r\n    for (const node of y) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { posY, posX } = node;\r\n\r\n  if (posX > 0) neighbors.push(grid[posY][posX - 1]);\r\n  if (posY > 0) neighbors.push(grid[posY - 1][posX]);\r\n  if (posY < grid.length - 1) neighbors.push(grid[posY + 1][posX]);\r\n  if (posX < grid[0].length - 1) neighbors.push(grid[posY][posX + 1]);\r\n  if (node.posY % 2 !== 0) {\r\n    if (posY < grid.length - 1 && posX < grid[0].length - 1)\r\n      neighbors.push(grid[posY + 1][posX + 1]);\r\n    if (posY > 0 && posX < grid[0].length - 1)\r\n      neighbors.push(grid[posY - 1][posX + 1]);\r\n  } else {\r\n    if (posY < grid.length - 1 && posX > 0)\r\n      neighbors.push(grid[posY + 1][posX - 1]);\r\n    if (posY > 0 && posX > 0) neighbors.push(grid[posY - 1][posX - 1]);\r\n  }\r\n  return neighbors.filter((neighbor) => !(neighbor.type === \"wall\"));\r\n  //return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function resetNodes(grid) {\r\n  const newGrid = grid.slice();\r\n\r\n  for (const y of grid) {\r\n    for (const x of y) {\r\n      const newNode = {\r\n        ...x,\r\n        distance: Infinity,\r\n        finishDistance: Infinity,\r\n        previousNode: null,\r\n      };\r\n      newGrid[x.posY][x.posX] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  let cost = 0;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    cost = cost + currentNode.cost;\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  document.getElementById(\"labelPathLength\").innerHTML =\r\n    shortestPath.length - 1 + \"\";\r\n\r\n  document.getElementById(\"labelPathCost\").innerHTML = cost + \"\";\r\n  return shortestPath;\r\n}\r\n","import { getAllNodes, resetNodes, getUnvisitedNeighbors } from \"./dijkstra.js\";\r\n\r\nexport function astar(grid, startPos, finishPos) {\r\n  document.getElementById(\"labelAlgorithm\").innerHTML = \"A*\";\r\n  const startTime = window.performance.now();\r\n  const visitedNodesInOrder = [];\r\n\r\n  const algoGrid = resetNodes(grid);\r\n\r\n  const startNode = algoGrid[startPos.y][startPos.x];\r\n  const finishNode = algoGrid[finishPos.y][finishPos.x];\r\n\r\n  startNode.distance = 0;\r\n  setFinishDist(startNode, finishNode);\r\n\r\n  const unvisitedNodes = getAllNodes(algoGrid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByFinishDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //skip wall\r\n    if (closestNode.type === \"wall\") continue;\r\n\r\n    //when closest node has distance infinity we are stuck -> stop\r\n    if (closestNode.distance === Infinity) {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode.type === \"finish\") {\r\n      const endTime = window.performance.now();\r\n      const time = endTime - startTime;\r\n\r\n      document.getElementById(\"labelSpeed\").innerHTML = time.toFixed(2) + \" ms\";\r\n      document.getElementById(\"labelNodesVisited\").innerHTML =\r\n        visitedNodesInOrder.length - 1 + \" Nodes\";\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, algoGrid, finishNode);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.finishDistance === Infinity)\r\n      setFinishDist(neighbor, finishNode);\r\n    const cost = neighbor.type === \"road\" ? 1 : 4;\r\n    if (neighbor.distance >= node.distance + cost) {\r\n      neighbor.distance = node.distance + cost;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction setFinishDist(node, finishNode) {\r\n  const dist =\r\n    Math.round(\r\n      Math.sqrt(\r\n        Math.pow(node.posX - finishNode.posX, 2) +\r\n          Math.pow(node.posY - finishNode.posY, 2),\r\n        2\r\n      )\r\n    ) * 4;\r\n  node.finishDistance = dist;\r\n}\r\n\r\nfunction sortNodesByFinishDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(\r\n    (nodeA, nodeB) =>\r\n      nodeA.distance +\r\n      nodeA.finishDistance -\r\n      (nodeB.finishDistance + nodeB.distance)\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\n\r\nimport \"./PathVisualizer.css\";\r\nimport { astar } from \"../algorithms/astar\";\r\n\r\nconst ACTION = {\r\n  WALL: \"wall\",\r\n  START: \"start\",\r\n  FINISH: \"finish\",\r\n  ROAD: \"road\",\r\n  DELETE: \"\",\r\n};\r\n\r\nconst ALGOS = {\r\n  DIJKSTRA: \"dijkstra\",\r\n  ASTAR: \"a-star\",\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      mouseAction: ACTION.WALL,\r\n      startNode: { y: 2, x: 3 },\r\n      finishNode: { y: 7, x: 8 },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getStartGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(posX, posY) {\r\n    const action = this.state.mouseAction;\r\n    if (\r\n      action === ACTION.WALL ||\r\n      action === ACTION.ROAD ||\r\n      action === ACTION.DELETE\r\n    ) {\r\n      const newGrid = getUpdateWallRoadGrid(\r\n        this.state.grid,\r\n        posX,\r\n        posY,\r\n        action\r\n      );\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n    if (action === ACTION.START || action === ACTION.FINISH) {\r\n      const newGrid = this.getUpdateStartFinishGrid(posX, posY, action);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(posX, posY) {\r\n    const action = this.state.mouseAction;\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (\r\n      action === ACTION.WALL ||\r\n      action === ACTION.ROAD ||\r\n      action === ACTION.DELETE\r\n    ) {\r\n      const newGrid = getUpdateWallRoadGrid(\r\n        this.state.grid,\r\n        posX,\r\n        posY,\r\n        action\r\n      );\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    const selectValue = document.getElementById(\"draw-selector\").value;\r\n    this.setState({ mouseIsPressed: false, mouseAction: selectValue });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPath) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      //at last i start animateShortestPath\r\n      if (i === visitedNodesInOrder.length) {\r\n        this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPath);\r\n        }, 50 * i);\r\n        return;\r\n      }\r\n      if (i < visitedNodesInOrder.length) {\r\n        //check if node is not start or finish\r\n        setTimeout(() => {\r\n          this.addNodeFocus(visitedNodesInOrder[i]);\r\n        }, 50 * i);\r\n        //when i bigger 0 then change i-1 to is visited\r\n        if (i > 0) {\r\n          setTimeout(() => {\r\n            this.addNodeVisited(visitedNodesInOrder[i - 1]);\r\n          }, 50 * i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addNodeFocus(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n      nodeElement.classList.add(\"node-focus\");\r\n    }\r\n  }\r\n\r\n  addNodeVisited(visitedNode) {\r\n    if (checkClassnameChangeable(visitedNode)) {\r\n      const node = visitedNode;\r\n      const nodeElement = document.getElementById(\r\n        `node-${node.posX}-${node.posY}`\r\n      );\r\n\r\n      if (nodeElement.classList.contains(\"node-focus\")) {\r\n        nodeElement.classList.remove(\"node-focus\");\r\n      }\r\n      if (node.type === ACTION.ROAD) {\r\n        nodeElement.classList.add(\"node-visited-road\");\r\n      }\r\n      nodeElement.classList.add(\"node-visited\");\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPath) {\r\n    for (let i = 0; i < nodesInShortestPath.length; i++) {\r\n      if (checkClassnameChangeable(nodesInShortestPath[i])) {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPath[i];\r\n          const nodeElement = document.getElementById(\r\n            `node-${node.posX}-${node.posY}`\r\n          );\r\n          const rowOffset = node.rowOffset ? \"row-offset\" : \"\";\r\n          if (node.type === ACTION.ROAD) {\r\n            nodeElement.className = \"node node-shortest-path-road \" + rowOffset;\r\n          } else {\r\n            nodeElement.className = \"node node-shortest-path \" + rowOffset;\r\n          }\r\n        }, 50 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  startAlgo() {\r\n    this.clear(false);\r\n    const algo = document.getElementById(\"algo-selector\").value;\r\n    if (algo === \"dijkstra\") {\r\n      this.visualizeDijkstra();\r\n    }\r\n    if (algo === \"a-star\") {\r\n      this.visualizeAStar();\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = dijkstra(grid, startPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    const { grid } = this.state;\r\n    const startPos = this.state.startNode;\r\n    const finishPos = this.state.finishNode;\r\n\r\n    const visitedNodesInOrder = astar(grid, startPos, finishPos);\r\n\r\n    const finishNode = grid[finishPos.y][finishPos.x];\r\n    const nodesInShortestPath = getShortestPath(finishNode);\r\n\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPath);\r\n  }\r\n\r\n  setAction(action) {\r\n    this.setState({ mouseAction: action });\r\n  }\r\n\r\n  //clearAll -> when true clear Walls and Roads\r\n  clear(clearAll) {\r\n    const newGrid = this.state.grid;\r\n    for (const y of newGrid) {\r\n      for (const x of y) {\r\n        const newType =\r\n          clearAll && (x.type === ACTION.WALL || x.type === ACTION.ROAD)\r\n            ? \"\"\r\n            : x.type;\r\n\r\n        const node = {\r\n          ...x,\r\n          isVisited: false,\r\n          type: newType,\r\n        };\r\n        newGrid[x.posY][x.posX] = node;\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.posX}-${node.posY}`\r\n        );\r\n        const offset = x.rowOffset ? \"row-offset\" : \"\";\r\n        nodeElement.className = \"node \" + offset + \" \" + x.type;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  clearWallRoad() {\r\n    const newGrid = this.getStartGrid();\r\n    for (const y of newGrid) {\r\n      for (const x of y) {\r\n        const node = {\r\n          ...x,\r\n          isVisited: false,\r\n          type: x.type === ACTION.WALL ? \"\" : x.type,\r\n        };\r\n        newGrid[x.posY][x.posX] = node;\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.posX}-${node.posY}`\r\n        );\r\n        const offset = x.rowOffset ? \"row-offset\" : \"\";\r\n        nodeElement.className = \"node \" + offset + \" \" + x.type;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  changeDrawType(selectObj) {\r\n    const value = selectObj.value;\r\n    this.setState({ mouseAction: value });\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <div>\r\n        <div className={\"menu\"}>\r\n          <div className=\"box\">\r\n            <select id={\"algo-selector\"} defaultValue={\"dijkstra\"}>\r\n              <option value={ALGOS.DIJKSTRA}>Dijkstra</option>\r\n              <option value={ALGOS.ASTAR}>A*</option>\r\n            </select>\r\n          </div>\r\n          <div className={\"box\"}>\r\n            <select\r\n              id={\"draw-selector\"}\r\n              onChange={() => this.changeDrawType(this)}\r\n              defaultValue={ACTION.WALL}\r\n            >\r\n              <option value={ACTION.WALL}>Wall</option>\r\n              <option value={ACTION.ROAD}>Road</option>\r\n              <option value={ACTION.DELETE}>Delete</option>\r\n            </select>\r\n          </div>\r\n          <button className={\"white-btn\"} onClick={() => this.clear(false)}>\r\n            Clear Path\r\n          </button>\r\n          <button className={\"startButton\"} onClick={() => this.startAlgo()}>\r\n            Start Search!\r\n          </button>\r\n          <button className={\"white-btn\"} onClick={() => this.clear(true)}>\r\n            Clear ALL\r\n          </button>\r\n          <button\r\n            id={\"setStartBtn\"}\r\n            className={\"btn\"}\r\n            onClick={() => this.setAction(ACTION.START)}\r\n          >\r\n            SetStart\r\n          </button>\r\n          <button\r\n            id={\"setFinishBtn\"}\r\n            className={\"btn\"}\r\n            onClick={() => this.setAction(ACTION.FINISH)}\r\n          >\r\n            SetFinish\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"infobox\">\r\n          <div className=\"info\">\r\n            <div className=\"info-top\">\r\n              <div className=\"infoFlex\">\r\n                <label id=\"algo-text\">Algorithm:</label>\r\n                <label id=\"labelAlgorithm\">--</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"info-center\">\r\n              <div className=\"info-left info-side\">\r\n                <div className=\"infoFlex\">\r\n                  <label>Speed:</label>\r\n                  <label id=\"labelSpeed\">--</label>\r\n                </div>\r\n                <div className=\"infoFlex\">\r\n                  <label>NodesVisited:</label>\r\n                  <label id=\"labelNodesVisited\">--</label>\r\n                </div>\r\n              </div>\r\n              <div className=\"info-right info-side\">\r\n                <div className=\"infoFlex\">\r\n                  <label>Path-Length:</label>\r\n                  <label id=\"labelPathLength\">--</label>\r\n                </div>\r\n                <div className=\"infoFlex\">\r\n                  <label>Path-Cost:</label>\r\n                  <label id=\"labelPathCost\">--</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid\" id=\"griddiv\">\r\n          {grid.map((x, xId) => {\r\n            return (\r\n              <div key={xId}>\r\n                {x.map((node, nodeId) => {\r\n                  const { posX, posY, type, distance } = node;\r\n                  return (\r\n                    <Node\r\n                      rowOffset={xId % 2 === 0 ? false : true}\r\n                      key={nodeId}\r\n                      type={type}\r\n                      posX={posX}\r\n                      posY={posY}\r\n                      onMouseDown={(posX, posY) =>\r\n                        this.handleMouseDown(posX, posY)\r\n                      }\r\n                      onMouseEnter={(posX, posY) =>\r\n                        this.handleMouseEnter(posX, posY)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      distance={distance}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createNode(posX, posY) {\r\n    return {\r\n      posX,\r\n      posY,\r\n      type:\r\n        posX === this.state.startNode.x && posY === this.state.startNode.y\r\n          ? \"start\"\r\n          : posX === this.state.finishNode.x && posY === this.state.finishNode.y\r\n          ? \"finish\"\r\n          : \"\",\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      previousNode: null,\r\n      finishDistance: Infinity,\r\n      rowOffset: posY % 2 === 0 ? false : true,\r\n    };\r\n  }\r\n\r\n  getStartGrid() {\r\n    const grid = [];\r\n\r\n    let canvas = document.getElementById(\"griddiv\");\r\n    //console.log(canvas.getBoundingClientRect().width);\r\n\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n\r\n    let yAmount = 5;\r\n    let xAmount = 5;\r\n\r\n    if (width <= 600) {\r\n      yAmount = height / 32;\r\n      xAmount = width / 36;\r\n    } else {\r\n      xAmount = width / 52;\r\n      yAmount = height / 40;\r\n    }\r\n\r\n    for (let y = 0; y < yAmount; y++) {\r\n      const row = [];\r\n\r\n      for (let x = 0; x < xAmount; x++) {\r\n        const node = this.createNode(x, y);\r\n        row.push(node);\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  getUpdateStartFinishGrid(posX, posY, action) {\r\n    const newGrid = this.state.grid;\r\n\r\n    let oldX = this.state.finishNode.x;\r\n    let oldY = this.state.finishNode.y;\r\n\r\n    if (action === ACTION.START) {\r\n      oldX = this.state.startNode.x;\r\n      oldY = this.state.startNode.y;\r\n    }\r\n\r\n    const oldNode = newGrid[oldY][oldX];\r\n    const newNode = {\r\n      ...oldNode,\r\n      type: \"\",\r\n    };\r\n    newGrid[oldY][oldX] = newNode;\r\n\r\n    const newStart = newGrid[posY][posX];\r\n    const theNewStart = {\r\n      ...newStart,\r\n      type: action,\r\n    };\r\n    newGrid[posY][posX] = theNewStart;\r\n\r\n    if (action === ACTION.START) {\r\n      this.setState({ startNode: { y: posY, x: posX } });\r\n      return newGrid;\r\n    } else {\r\n      this.setState({ finishNode: { y: posY, x: posX } });\r\n      return newGrid;\r\n    }\r\n  }\r\n}\r\n\r\nconst getUpdateWallRoadGrid = (grid, x, y, action) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[y][x];\r\n  if (node.type === \"start\" || node.type === \"finish\") {\r\n    return newGrid;\r\n  }\r\n  const newNode = {\r\n    ...node,\r\n    type: action,\r\n  };\r\n  newGrid[y][x] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst checkClassnameChangeable = (node) => {\r\n  if (node.type === \"start\" || node.type === \"finish\") {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathVisualizer from './PathVisualizer/PathVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathVisualizer></PathVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}